#ifndef BNN_BNN_TEMPLATES_OPERATIONS_OPERATIONS_HPP
#define BNN_BNN_TEMPLATES_OPERATIONS_OPERATIONS_HPP

template Add<bool>* add<bool>(TensorCPU<bool>* a, TensorCPU<bool>* b);
template Add<short>* add<short>(TensorCPU<short>* a, TensorCPU<short>* b);
template Add<unsigned short>* add<unsigned short>(TensorCPU<unsigned short>* a, TensorCPU<unsigned short>* b);
template Add<int>* add<int>(TensorCPU<int>* a, TensorCPU<int>* b);
template Add<unsigned int>* add<unsigned int>(TensorCPU<unsigned int>* a, TensorCPU<unsigned int>* b);
template Add<long>* add<long>(TensorCPU<long>* a, TensorCPU<long>* b);
template Add<unsigned long>* add<unsigned long>(TensorCPU<unsigned long>* a, TensorCPU<unsigned long>* b);
template Add<long long>* add<long long>(TensorCPU<long long>* a, TensorCPU<long long>* b);
template Add<unsigned long long>* add<unsigned long long>(TensorCPU<unsigned long long>* a, TensorCPU<unsigned long long>* b);
template Add<float>* add<float>(TensorCPU<float>* a, TensorCPU<float>* b);
template Add<double>* add<double>(TensorCPU<double>* a, TensorCPU<double>* b);
template Add<long double>* add<long double>(TensorCPU<long double>* a, TensorCPU<long double>* b);
template Add<bool>* add<bool>(TensorCPU<bool>* a, Operator<bool>* b);
template Add<short>* add<short>(TensorCPU<short>* a, Operator<short>* b);
template Add<unsigned short>* add<unsigned short>(TensorCPU<unsigned short>* a, Operator<unsigned short>* b);
template Add<int>* add<int>(TensorCPU<int>* a, Operator<int>* b);
template Add<unsigned int>* add<unsigned int>(TensorCPU<unsigned int>* a, Operator<unsigned int>* b);
template Add<long>* add<long>(TensorCPU<long>* a, Operator<long>* b);
template Add<unsigned long>* add<unsigned long>(TensorCPU<unsigned long>* a, Operator<unsigned long>* b);
template Add<long long>* add<long long>(TensorCPU<long long>* a, Operator<long long>* b);
template Add<unsigned long long>* add<unsigned long long>(TensorCPU<unsigned long long>* a, Operator<unsigned long long>* b);
template Add<float>* add<float>(TensorCPU<float>* a, Operator<float>* b);
template Add<double>* add<double>(TensorCPU<double>* a, Operator<double>* b);
template Add<long double>* add<long double>(TensorCPU<long double>* a, Operator<long double>* b);
template Add<bool>* add<bool>(Operator<bool>* a, TensorCPU<bool>* b);
template Add<short>* add<short>(Operator<short>* a, TensorCPU<short>* b);
template Add<unsigned short>* add<unsigned short>(Operator<unsigned short>* a, TensorCPU<unsigned short>* b);
template Add<int>* add<int>(Operator<int>* a, TensorCPU<int>* b);
template Add<unsigned int>* add<unsigned int>(Operator<unsigned int>* a, TensorCPU<unsigned int>* b);
template Add<long>* add<long>(Operator<long>* a, TensorCPU<long>* b);
template Add<unsigned long>* add<unsigned long>(Operator<unsigned long>* a, TensorCPU<unsigned long>* b);
template Add<long long>* add<long long>(Operator<long long>* a, TensorCPU<long long>* b);
template Add<unsigned long long>* add<unsigned long long>(Operator<unsigned long long>* a, TensorCPU<unsigned long long>* b);
template Add<float>* add<float>(Operator<float>* a, TensorCPU<float>* b);
template Add<double>* add<double>(Operator<double>* a, TensorCPU<double>* b);
template Add<long double>* add<long double>(Operator<long double>* a, TensorCPU<long double>* b);
template Add<bool>* add<bool>(Operator<bool>* a, Operator<bool>* b);
template Add<short>* add<short>(Operator<short>* a, Operator<short>* b);
template Add<unsigned short>* add<unsigned short>(Operator<unsigned short>* a, Operator<unsigned short>* b);
template Add<int>* add<int>(Operator<int>* a, Operator<int>* b);
template Add<unsigned int>* add<unsigned int>(Operator<unsigned int>* a, Operator<unsigned int>* b);
template Add<long>* add<long>(Operator<long>* a, Operator<long>* b);
template Add<unsigned long>* add<unsigned long>(Operator<unsigned long>* a, Operator<unsigned long>* b);
template Add<long long>* add<long long>(Operator<long long>* a, Operator<long long>* b);
template Add<unsigned long long>* add<unsigned long long>(Operator<unsigned long long>* a, Operator<unsigned long long>* b);
template Add<float>* add<float>(Operator<float>* a, Operator<float>* b);
template Add<double>* add<double>(Operator<double>* a, Operator<double>* b);
template Add<long double>* add<long double>(Operator<long double>* a, Operator<long double>* b);
template Exp<bool>* exp<bool>(TensorCPU<bool>* a);
template Exp<short>* exp<short>(TensorCPU<short>* a);
template Exp<unsigned short>* exp<unsigned short>(TensorCPU<unsigned short>* a);
template Exp<int>* exp<int>(TensorCPU<int>* a);
template Exp<unsigned int>* exp<unsigned int>(TensorCPU<unsigned int>* a);
template Exp<long>* exp<long>(TensorCPU<long>* a);
template Exp<unsigned long>* exp<unsigned long>(TensorCPU<unsigned long>* a);
template Exp<long long>* exp<long long>(TensorCPU<long long>* a);
template Exp<unsigned long long>* exp<unsigned long long>(TensorCPU<unsigned long long>* a);
template Exp<float>* exp<float>(TensorCPU<float>* a);
template Exp<double>* exp<double>(TensorCPU<double>* a);
template Exp<long double>* exp<long double>(TensorCPU<long double>* a);
template Exp<bool>* exp<bool>(Operator<bool>* a);
template Exp<short>* exp<short>(Operator<short>* a);
template Exp<unsigned short>* exp<unsigned short>(Operator<unsigned short>* a);
template Exp<int>* exp<int>(Operator<int>* a);
template Exp<unsigned int>* exp<unsigned int>(Operator<unsigned int>* a);
template Exp<long>* exp<long>(Operator<long>* a);
template Exp<unsigned long>* exp<unsigned long>(Operator<unsigned long>* a);
template Exp<long long>* exp<long long>(Operator<long long>* a);
template Exp<unsigned long long>* exp<unsigned long long>(Operator<unsigned long long>* a);
template Exp<float>* exp<float>(Operator<float>* a);
template Exp<double>* exp<double>(Operator<double>* a);
template Exp<long double>* exp<long double>(Operator<long double>* a);
template Log<bool>* log<bool>(TensorCPU<bool>* a);
template Log<short>* log<short>(TensorCPU<short>* a);
template Log<unsigned short>* log<unsigned short>(TensorCPU<unsigned short>* a);
template Log<int>* log<int>(TensorCPU<int>* a);
template Log<unsigned int>* log<unsigned int>(TensorCPU<unsigned int>* a);
template Log<long>* log<long>(TensorCPU<long>* a);
template Log<unsigned long>* log<unsigned long>(TensorCPU<unsigned long>* a);
template Log<long long>* log<long long>(TensorCPU<long long>* a);
template Log<unsigned long long>* log<unsigned long long>(TensorCPU<unsigned long long>* a);
template Log<float>* log<float>(TensorCPU<float>* a);
template Log<double>* log<double>(TensorCPU<double>* a);
template Log<long double>* log<long double>(TensorCPU<long double>* a);
template Log<bool>* log<bool>(Operator<bool>* a);
template Log<short>* log<short>(Operator<short>* a);
template Log<unsigned short>* log<unsigned short>(Operator<unsigned short>* a);
template Log<int>* log<int>(Operator<int>* a);
template Log<unsigned int>* log<unsigned int>(Operator<unsigned int>* a);
template Log<long>* log<long>(Operator<long>* a);
template Log<unsigned long>* log<unsigned long>(Operator<unsigned long>* a);
template Log<long long>* log<long long>(Operator<long long>* a);
template Log<unsigned long long>* log<unsigned long long>(Operator<unsigned long long>* a);
template Log<float>* log<float>(Operator<float>* a);
template Log<double>* log<double>(Operator<double>* a);
template Log<long double>* log<long double>(Operator<long double>* a);
template Rectifier<bool>* rectifier<bool>(TensorCPU<bool>* a);
template Rectifier<short>* rectifier<short>(TensorCPU<short>* a);
template Rectifier<unsigned short>* rectifier<unsigned short>(TensorCPU<unsigned short>* a);
template Rectifier<int>* rectifier<int>(TensorCPU<int>* a);
template Rectifier<unsigned int>* rectifier<unsigned int>(TensorCPU<unsigned int>* a);
template Rectifier<long>* rectifier<long>(TensorCPU<long>* a);
template Rectifier<unsigned long>* rectifier<unsigned long>(TensorCPU<unsigned long>* a);
template Rectifier<long long>* rectifier<long long>(TensorCPU<long long>* a);
template Rectifier<unsigned long long>* rectifier<unsigned long long>(TensorCPU<unsigned long long>* a);
template Rectifier<float>* rectifier<float>(TensorCPU<float>* a);
template Rectifier<double>* rectifier<double>(TensorCPU<double>* a);
template Rectifier<long double>* rectifier<long double>(TensorCPU<long double>* a);
template Rectifier<bool>* rectifier<bool>(Operator<bool>* a);
template Rectifier<short>* rectifier<short>(Operator<short>* a);
template Rectifier<unsigned short>* rectifier<unsigned short>(Operator<unsigned short>* a);
template Rectifier<int>* rectifier<int>(Operator<int>* a);
template Rectifier<unsigned int>* rectifier<unsigned int>(Operator<unsigned int>* a);
template Rectifier<long>* rectifier<long>(Operator<long>* a);
template Rectifier<unsigned long>* rectifier<unsigned long>(Operator<unsigned long>* a);
template Rectifier<long long>* rectifier<long long>(Operator<long long>* a);
template Rectifier<unsigned long long>* rectifier<unsigned long long>(Operator<unsigned long long>* a);
template Rectifier<float>* rectifier<float>(Operator<float>* a);
template Rectifier<double>* rectifier<double>(Operator<double>* a);
template Rectifier<long double>* rectifier<long double>(Operator<long double>* a);
template MatMul<bool>* matmul<bool>(TensorCPU<bool>* a, TensorCPU<bool>* b);
template MatMul<short>* matmul<short>(TensorCPU<short>* a, TensorCPU<short>* b);
template MatMul<unsigned short>* matmul<unsigned short>(TensorCPU<unsigned short>* a, TensorCPU<unsigned short>* b);
template MatMul<int>* matmul<int>(TensorCPU<int>* a, TensorCPU<int>* b);
template MatMul<unsigned int>* matmul<unsigned int>(TensorCPU<unsigned int>* a, TensorCPU<unsigned int>* b);
template MatMul<long>* matmul<long>(TensorCPU<long>* a, TensorCPU<long>* b);
template MatMul<unsigned long>* matmul<unsigned long>(TensorCPU<unsigned long>* a, TensorCPU<unsigned long>* b);
template MatMul<long long>* matmul<long long>(TensorCPU<long long>* a, TensorCPU<long long>* b);
template MatMul<unsigned long long>* matmul<unsigned long long>(TensorCPU<unsigned long long>* a, TensorCPU<unsigned long long>* b);
template MatMul<float>* matmul<float>(TensorCPU<float>* a, TensorCPU<float>* b);
template MatMul<double>* matmul<double>(TensorCPU<double>* a, TensorCPU<double>* b);
template MatMul<long double>* matmul<long double>(TensorCPU<long double>* a, TensorCPU<long double>* b);
template MatMul<bool>* matmul<bool>(TensorCPU<bool>* a, Operator<bool>* b);
template MatMul<short>* matmul<short>(TensorCPU<short>* a, Operator<short>* b);
template MatMul<unsigned short>* matmul<unsigned short>(TensorCPU<unsigned short>* a, Operator<unsigned short>* b);
template MatMul<int>* matmul<int>(TensorCPU<int>* a, Operator<int>* b);
template MatMul<unsigned int>* matmul<unsigned int>(TensorCPU<unsigned int>* a, Operator<unsigned int>* b);
template MatMul<long>* matmul<long>(TensorCPU<long>* a, Operator<long>* b);
template MatMul<unsigned long>* matmul<unsigned long>(TensorCPU<unsigned long>* a, Operator<unsigned long>* b);
template MatMul<long long>* matmul<long long>(TensorCPU<long long>* a, Operator<long long>* b);
template MatMul<unsigned long long>* matmul<unsigned long long>(TensorCPU<unsigned long long>* a, Operator<unsigned long long>* b);
template MatMul<float>* matmul<float>(TensorCPU<float>* a, Operator<float>* b);
template MatMul<double>* matmul<double>(TensorCPU<double>* a, Operator<double>* b);
template MatMul<long double>* matmul<long double>(TensorCPU<long double>* a, Operator<long double>* b);
template MatMul<bool>* matmul<bool>(Operator<bool>* a, TensorCPU<bool>* b);
template MatMul<short>* matmul<short>(Operator<short>* a, TensorCPU<short>* b);
template MatMul<unsigned short>* matmul<unsigned short>(Operator<unsigned short>* a, TensorCPU<unsigned short>* b);
template MatMul<int>* matmul<int>(Operator<int>* a, TensorCPU<int>* b);
template MatMul<unsigned int>* matmul<unsigned int>(Operator<unsigned int>* a, TensorCPU<unsigned int>* b);
template MatMul<long>* matmul<long>(Operator<long>* a, TensorCPU<long>* b);
template MatMul<unsigned long>* matmul<unsigned long>(Operator<unsigned long>* a, TensorCPU<unsigned long>* b);
template MatMul<long long>* matmul<long long>(Operator<long long>* a, TensorCPU<long long>* b);
template MatMul<unsigned long long>* matmul<unsigned long long>(Operator<unsigned long long>* a, TensorCPU<unsigned long long>* b);
template MatMul<float>* matmul<float>(Operator<float>* a, TensorCPU<float>* b);
template MatMul<double>* matmul<double>(Operator<double>* a, TensorCPU<double>* b);
template MatMul<long double>* matmul<long double>(Operator<long double>* a, TensorCPU<long double>* b);
template MatMul<bool>* matmul<bool>(Operator<bool>* a, Operator<bool>* b);
template MatMul<short>* matmul<short>(Operator<short>* a, Operator<short>* b);
template MatMul<unsigned short>* matmul<unsigned short>(Operator<unsigned short>* a, Operator<unsigned short>* b);
template MatMul<int>* matmul<int>(Operator<int>* a, Operator<int>* b);
template MatMul<unsigned int>* matmul<unsigned int>(Operator<unsigned int>* a, Operator<unsigned int>* b);
template MatMul<long>* matmul<long>(Operator<long>* a, Operator<long>* b);
template MatMul<unsigned long>* matmul<unsigned long>(Operator<unsigned long>* a, Operator<unsigned long>* b);
template MatMul<long long>* matmul<long long>(Operator<long long>* a, Operator<long long>* b);
template MatMul<unsigned long long>* matmul<unsigned long long>(Operator<unsigned long long>* a, Operator<unsigned long long>* b);
template MatMul<float>* matmul<float>(Operator<float>* a, Operator<float>* b);
template MatMul<double>* matmul<double>(Operator<double>* a, Operator<double>* b);
template MatMul<long double>* matmul<long double>(Operator<long double>* a, Operator<long double>* b);
template Multiply<bool>* multiply<bool>(TensorCPU<bool>* a, TensorCPU<bool>* b);
template Multiply<short>* multiply<short>(TensorCPU<short>* a, TensorCPU<short>* b);
template Multiply<unsigned short>* multiply<unsigned short>(TensorCPU<unsigned short>* a, TensorCPU<unsigned short>* b);
template Multiply<int>* multiply<int>(TensorCPU<int>* a, TensorCPU<int>* b);
template Multiply<unsigned int>* multiply<unsigned int>(TensorCPU<unsigned int>* a, TensorCPU<unsigned int>* b);
template Multiply<long>* multiply<long>(TensorCPU<long>* a, TensorCPU<long>* b);
template Multiply<unsigned long>* multiply<unsigned long>(TensorCPU<unsigned long>* a, TensorCPU<unsigned long>* b);
template Multiply<long long>* multiply<long long>(TensorCPU<long long>* a, TensorCPU<long long>* b);
template Multiply<unsigned long long>* multiply<unsigned long long>(TensorCPU<unsigned long long>* a, TensorCPU<unsigned long long>* b);
template Multiply<float>* multiply<float>(TensorCPU<float>* a, TensorCPU<float>* b);
template Multiply<double>* multiply<double>(TensorCPU<double>* a, TensorCPU<double>* b);
template Multiply<long double>* multiply<long double>(TensorCPU<long double>* a, TensorCPU<long double>* b);
template Multiply<bool>* multiply<bool>(TensorCPU<bool>* a, Operator<bool>* b);
template Multiply<short>* multiply<short>(TensorCPU<short>* a, Operator<short>* b);
template Multiply<unsigned short>* multiply<unsigned short>(TensorCPU<unsigned short>* a, Operator<unsigned short>* b);
template Multiply<int>* multiply<int>(TensorCPU<int>* a, Operator<int>* b);
template Multiply<unsigned int>* multiply<unsigned int>(TensorCPU<unsigned int>* a, Operator<unsigned int>* b);
template Multiply<long>* multiply<long>(TensorCPU<long>* a, Operator<long>* b);
template Multiply<unsigned long>* multiply<unsigned long>(TensorCPU<unsigned long>* a, Operator<unsigned long>* b);
template Multiply<long long>* multiply<long long>(TensorCPU<long long>* a, Operator<long long>* b);
template Multiply<unsigned long long>* multiply<unsigned long long>(TensorCPU<unsigned long long>* a, Operator<unsigned long long>* b);
template Multiply<float>* multiply<float>(TensorCPU<float>* a, Operator<float>* b);
template Multiply<double>* multiply<double>(TensorCPU<double>* a, Operator<double>* b);
template Multiply<long double>* multiply<long double>(TensorCPU<long double>* a, Operator<long double>* b);
template Multiply<bool>* multiply<bool>(Operator<bool>* a, TensorCPU<bool>* b);
template Multiply<short>* multiply<short>(Operator<short>* a, TensorCPU<short>* b);
template Multiply<unsigned short>* multiply<unsigned short>(Operator<unsigned short>* a, TensorCPU<unsigned short>* b);
template Multiply<int>* multiply<int>(Operator<int>* a, TensorCPU<int>* b);
template Multiply<unsigned int>* multiply<unsigned int>(Operator<unsigned int>* a, TensorCPU<unsigned int>* b);
template Multiply<long>* multiply<long>(Operator<long>* a, TensorCPU<long>* b);
template Multiply<unsigned long>* multiply<unsigned long>(Operator<unsigned long>* a, TensorCPU<unsigned long>* b);
template Multiply<long long>* multiply<long long>(Operator<long long>* a, TensorCPU<long long>* b);
template Multiply<unsigned long long>* multiply<unsigned long long>(Operator<unsigned long long>* a, TensorCPU<unsigned long long>* b);
template Multiply<float>* multiply<float>(Operator<float>* a, TensorCPU<float>* b);
template Multiply<double>* multiply<double>(Operator<double>* a, TensorCPU<double>* b);
template Multiply<long double>* multiply<long double>(Operator<long double>* a, TensorCPU<long double>* b);
template Multiply<bool>* multiply<bool>(Operator<bool>* a, Operator<bool>* b);
template Multiply<short>* multiply<short>(Operator<short>* a, Operator<short>* b);
template Multiply<unsigned short>* multiply<unsigned short>(Operator<unsigned short>* a, Operator<unsigned short>* b);
template Multiply<int>* multiply<int>(Operator<int>* a, Operator<int>* b);
template Multiply<unsigned int>* multiply<unsigned int>(Operator<unsigned int>* a, Operator<unsigned int>* b);
template Multiply<long>* multiply<long>(Operator<long>* a, Operator<long>* b);
template Multiply<unsigned long>* multiply<unsigned long>(Operator<unsigned long>* a, Operator<unsigned long>* b);
template Multiply<long long>* multiply<long long>(Operator<long long>* a, Operator<long long>* b);
template Multiply<unsigned long long>* multiply<unsigned long long>(Operator<unsigned long long>* a, Operator<unsigned long long>* b);
template Multiply<float>* multiply<float>(Operator<float>* a, Operator<float>* b);
template Multiply<double>* multiply<double>(Operator<double>* a, Operator<double>* b);
template Multiply<long double>* multiply<long double>(Operator<long double>* a, Operator<long double>* b);
template Divide<bool>* divide<bool>(TensorCPU<bool>* a, TensorCPU<bool>* b);
template Divide<short>* divide<short>(TensorCPU<short>* a, TensorCPU<short>* b);
template Divide<unsigned short>* divide<unsigned short>(TensorCPU<unsigned short>* a, TensorCPU<unsigned short>* b);
template Divide<int>* divide<int>(TensorCPU<int>* a, TensorCPU<int>* b);
template Divide<unsigned int>* divide<unsigned int>(TensorCPU<unsigned int>* a, TensorCPU<unsigned int>* b);
template Divide<long>* divide<long>(TensorCPU<long>* a, TensorCPU<long>* b);
template Divide<unsigned long>* divide<unsigned long>(TensorCPU<unsigned long>* a, TensorCPU<unsigned long>* b);
template Divide<long long>* divide<long long>(TensorCPU<long long>* a, TensorCPU<long long>* b);
template Divide<unsigned long long>* divide<unsigned long long>(TensorCPU<unsigned long long>* a, TensorCPU<unsigned long long>* b);
template Divide<float>* divide<float>(TensorCPU<float>* a, TensorCPU<float>* b);
template Divide<double>* divide<double>(TensorCPU<double>* a, TensorCPU<double>* b);
template Divide<long double>* divide<long double>(TensorCPU<long double>* a, TensorCPU<long double>* b);
template Divide<bool>* divide<bool>(TensorCPU<bool>* a, Operator<bool>* b);
template Divide<short>* divide<short>(TensorCPU<short>* a, Operator<short>* b);
template Divide<unsigned short>* divide<unsigned short>(TensorCPU<unsigned short>* a, Operator<unsigned short>* b);
template Divide<int>* divide<int>(TensorCPU<int>* a, Operator<int>* b);
template Divide<unsigned int>* divide<unsigned int>(TensorCPU<unsigned int>* a, Operator<unsigned int>* b);
template Divide<long>* divide<long>(TensorCPU<long>* a, Operator<long>* b);
template Divide<unsigned long>* divide<unsigned long>(TensorCPU<unsigned long>* a, Operator<unsigned long>* b);
template Divide<long long>* divide<long long>(TensorCPU<long long>* a, Operator<long long>* b);
template Divide<unsigned long long>* divide<unsigned long long>(TensorCPU<unsigned long long>* a, Operator<unsigned long long>* b);
template Divide<float>* divide<float>(TensorCPU<float>* a, Operator<float>* b);
template Divide<double>* divide<double>(TensorCPU<double>* a, Operator<double>* b);
template Divide<long double>* divide<long double>(TensorCPU<long double>* a, Operator<long double>* b);
template Divide<bool>* divide<bool>(Operator<bool>* a, TensorCPU<bool>* b);
template Divide<short>* divide<short>(Operator<short>* a, TensorCPU<short>* b);
template Divide<unsigned short>* divide<unsigned short>(Operator<unsigned short>* a, TensorCPU<unsigned short>* b);
template Divide<int>* divide<int>(Operator<int>* a, TensorCPU<int>* b);
template Divide<unsigned int>* divide<unsigned int>(Operator<unsigned int>* a, TensorCPU<unsigned int>* b);
template Divide<long>* divide<long>(Operator<long>* a, TensorCPU<long>* b);
template Divide<unsigned long>* divide<unsigned long>(Operator<unsigned long>* a, TensorCPU<unsigned long>* b);
template Divide<long long>* divide<long long>(Operator<long long>* a, TensorCPU<long long>* b);
template Divide<unsigned long long>* divide<unsigned long long>(Operator<unsigned long long>* a, TensorCPU<unsigned long long>* b);
template Divide<float>* divide<float>(Operator<float>* a, TensorCPU<float>* b);
template Divide<double>* divide<double>(Operator<double>* a, TensorCPU<double>* b);
template Divide<long double>* divide<long double>(Operator<long double>* a, TensorCPU<long double>* b);
template Divide<bool>* divide<bool>(Operator<bool>* a, Operator<bool>* b);
template Divide<short>* divide<short>(Operator<short>* a, Operator<short>* b);
template Divide<unsigned short>* divide<unsigned short>(Operator<unsigned short>* a, Operator<unsigned short>* b);
template Divide<int>* divide<int>(Operator<int>* a, Operator<int>* b);
template Divide<unsigned int>* divide<unsigned int>(Operator<unsigned int>* a, Operator<unsigned int>* b);
template Divide<long>* divide<long>(Operator<long>* a, Operator<long>* b);
template Divide<unsigned long>* divide<unsigned long>(Operator<unsigned long>* a, Operator<unsigned long>* b);
template Divide<long long>* divide<long long>(Operator<long long>* a, Operator<long long>* b);
template Divide<unsigned long long>* divide<unsigned long long>(Operator<unsigned long long>* a, Operator<unsigned long long>* b);
template Divide<float>* divide<float>(Operator<float>* a, Operator<float>* b);
template Divide<double>* divide<double>(Operator<double>* a, Operator<double>* b);
template Divide<long double>* divide<long double>(Operator<long double>* a, Operator<long double>* b);
template Sum<bool>* sum<bool>(TensorCPU<bool>* a, unsigned int axis);
template Sum<short>* sum<short>(TensorCPU<short>* a, unsigned int axis);
template Sum<unsigned short>* sum<unsigned short>(TensorCPU<unsigned short>* a, unsigned int axis);
template Sum<int>* sum<int>(TensorCPU<int>* a, unsigned int axis);
template Sum<unsigned int>* sum<unsigned int>(TensorCPU<unsigned int>* a, unsigned int axis);
template Sum<long>* sum<long>(TensorCPU<long>* a, unsigned int axis);
template Sum<unsigned long>* sum<unsigned long>(TensorCPU<unsigned long>* a, unsigned int axis);
template Sum<long long>* sum<long long>(TensorCPU<long long>* a, unsigned int axis);
template Sum<unsigned long long>* sum<unsigned long long>(TensorCPU<unsigned long long>* a, unsigned int axis);
template Sum<float>* sum<float>(TensorCPU<float>* a, unsigned int axis);
template Sum<double>* sum<double>(TensorCPU<double>* a, unsigned int axis);
template Sum<long double>* sum<long double>(TensorCPU<long double>* a, unsigned int axis);
template Sum<bool>* sum<bool>(Operator<bool>* a, unsigned int axis);
template Sum<short>* sum<short>(Operator<short>* a, unsigned int axis);
template Sum<unsigned short>* sum<unsigned short>(Operator<unsigned short>* a, unsigned int axis);
template Sum<int>* sum<int>(Operator<int>* a, unsigned int axis);
template Sum<unsigned int>* sum<unsigned int>(Operator<unsigned int>* a, unsigned int axis);
template Sum<long>* sum<long>(Operator<long>* a, unsigned int axis);
template Sum<unsigned long>* sum<unsigned long>(Operator<unsigned long>* a, unsigned int axis);
template Sum<long long>* sum<long long>(Operator<long long>* a, unsigned int axis);
template Sum<unsigned long long>* sum<unsigned long long>(Operator<unsigned long long>* a, unsigned int axis);
template Sum<float>* sum<float>(Operator<float>* a, unsigned int axis);
template Sum<double>* sum<double>(Operator<double>* a, unsigned int axis);
template Sum<long double>* sum<long double>(Operator<long double>* a, unsigned int axis);

#endif
